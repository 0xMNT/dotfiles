# perl gnu stow
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

alias vim="nvim"

alias py="python3"

alias ls="eza --icons"
alias l="ls -lah"
alias lt="ls -Ta"
alias tree="ls -Ta"

alias s="systemctl"

alias k="kubectl"
alias m="minikube"

alias tks="tmux kill-server"

alias lg="lazygit"
alias ld="lazydocker"

alias ff="fastfetch"
alias suu="sudo pacman -Syu -y"

alias repos="gh repo clone \$(gh repo list 0xmnt | awk '{print \$1}' | fzf)"

alias ip="ip -c -br"

alias q="kubie"

# ns() {
#     local ns
#     if [[ -z "$1" ]]; then
#         # Use fzf to select a namespace interactively
#         ns=$(kubectl get ns | awk '{print $1}' | tail -n +2 | fzf --height 15 --border --prompt="Select a namespace: ") 
#
#         # If no namespace is selected, get the current namespace
#         if [[ -z "$ns" ]]; then
#             ns=$(kubectl config view --minify --output 'jsonpath={..namespace}')
#             ns=${ns:-default}  # If current namespace is also empty, fallback to 'default'
#         fi
#     else
#         ns=$1  
#     fi
#
#     kubectl config set-context --current --namespace="$ns"
# }
#
# kc() {
#     local cluster
#
#     if [[ -z "$1" ]]; then
#         cluster=$(kubectl config get-clusters | tail -n +2 | fzf --height 15 --border --prompt="Select a cluster: ")
#
#     else
#         cluster=$1
#     fi
#
#     # Set the current context to the selected or provided cluster
#     kubectl config set-context --current --cluster="$cluster"
# }
